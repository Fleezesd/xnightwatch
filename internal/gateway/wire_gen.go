// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gateway

import (
	"github.com/fleezesd/xnightwatch/internal/gateway/biz"
	"github.com/fleezesd/xnightwatch/internal/gateway/server"
	"github.com/fleezesd/xnightwatch/internal/gateway/service"
	"github.com/fleezesd/xnightwatch/internal/gateway/store"
	"github.com/fleezesd/xnightwatch/internal/pkg/bootstrap"
	"github.com/fleezesd/xnightwatch/pkg/db"
	"github.com/fleezesd/xnightwatch/pkg/options"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

func wireApp(arg <-chan struct{}, appInfo bootstrap.AppInfo, config *server.Config, mySQLOptions *db.MySQLOptions, redisOptions *db.RedisOptions, optionsRedisOptions *options.RedisOptions, etcdOptions *options.EtcdOptions) (*kratos.App, func(), error) {
	logger := bootstrap.NewLogger(appInfo)
	registrar := bootstrap.NewEtcdRegistrar(etcdOptions)
	appConfig := bootstrap.AppConfig{
		Info:      appInfo,
		Logger:    logger,
		Registrar: registrar,
	}
	gormDB, err := db.NewMySQL(mySQLOptions)
	if err != nil {
		return nil, nil, err
	}
	datastore := store.NewStore(gormDB)
	bizBiz := biz.NewBiz(datastore)
	gatewayService := service.NewGatewayService(bizBiz)
	httpServer := server.NewHTTPServer(config, gatewayService, logger)
	grpcServer := server.NewGRPCServer(config, gatewayService, logger)
	v := server.NewServers(httpServer, grpcServer)
	app := bootstrap.NewApp(appConfig, v...)
	return app, func() {
	}, nil
}
