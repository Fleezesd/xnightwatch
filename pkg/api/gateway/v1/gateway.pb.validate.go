// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway/v1/gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionResponseMultiError, or nil if none found.
func (m *GetVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GitVersion

	// no validation rules for GitCommit

	// no validation rules for GitTreeState

	// no validation rules for BuildDate

	// no validation rules for GoVersion

	// no validation rules for Compiler

	// no validation rules for Platform

	if len(errors) > 0 {
		return GetVersionResponseMultiError(errors)
	}

	return nil
}

// GetVersionResponseMultiError is an error wrapping multiple validation errors
// returned by GetVersionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionResponseMultiError) AllErrors() []error { return m }

// GetVersionResponseValidationError is the validation error returned by
// GetVersionResponse.Validate if the designated constraints aren't met.
type GetVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionResponseValidationError) ErrorName() string {
	return "GetVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionResponseValidationError{}

// Validate checks the field values on MinerSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinerSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinerSet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinerSetMultiError, or nil
// if none found.
func (m *MinerSet) ValidateAll() error {
	return m.validate(true)
}

func (m *MinerSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Replicas

	// no validation rules for DisplayName

	// no validation rules for DeletePolicy

	if all {
		switch v := interface{}(m.GetMinerTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "MinerTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "MinerTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinerTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinerSetValidationError{
				field:  "MinerTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinerSetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinerSetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinerSetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MinerSetMultiError(errors)
	}

	return nil
}

// MinerSetMultiError is an error wrapping multiple validation errors returned
// by MinerSet.ValidateAll() if the designated constraints aren't met.
type MinerSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinerSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinerSetMultiError) AllErrors() []error { return m }

// MinerSetValidationError is the validation error returned by
// MinerSet.Validate if the designated constraints aren't met.
type MinerSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinerSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinerSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinerSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinerSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinerSetValidationError) ErrorName() string { return "MinerSetValidationError" }

// Error satisfies the builtin error interface
func (e MinerSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinerSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinerSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinerSetValidationError{}

// Validate checks the field values on MinerTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MinerTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MinerTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MinerTemplateMultiError, or
// nil if none found.
func (m *MinerTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *MinerTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinerType

	// no validation rules for ChainName

	// no validation rules for DataDir

	if len(errors) > 0 {
		return MinerTemplateMultiError(errors)
	}

	return nil
}

// MinerTemplateMultiError is an error wrapping multiple validation errors
// returned by MinerTemplate.ValidateAll() if the designated constraints
// aren't met.
type MinerTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinerTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinerTemplateMultiError) AllErrors() []error { return m }

// MinerTemplateValidationError is the validation error returned by
// MinerTemplate.Validate if the designated constraints aren't met.
type MinerTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinerTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinerTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinerTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinerTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinerTemplateValidationError) ErrorName() string { return "MinerTemplateValidationError" }

// Error satisfies the builtin error interface
func (e MinerTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinerTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinerTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinerTemplateValidationError{}

// Validate checks the field values on ListMinerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMinerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMinerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMinerSetRequestMultiError, or nil if none found.
func (m *ListMinerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMinerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListMinerSetRequestMultiError(errors)
	}

	return nil
}

// ListMinerSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListMinerSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMinerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMinerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMinerSetRequestMultiError) AllErrors() []error { return m }

// ListMinerSetRequestValidationError is the validation error returned by
// ListMinerSetRequest.Validate if the designated constraints aren't met.
type ListMinerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMinerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMinerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMinerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMinerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMinerSetRequestValidationError) ErrorName() string {
	return "ListMinerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMinerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMinerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMinerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMinerSetRequestValidationError{}

// Validate checks the field values on ListMinerSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMinerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMinerSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMinerSetResponseMultiError, or nil if none found.
func (m *ListMinerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMinerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	for idx, item := range m.GetMinerSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMinerSetResponseValidationError{
						field:  fmt.Sprintf("MinerSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMinerSetResponseValidationError{
						field:  fmt.Sprintf("MinerSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMinerSetResponseValidationError{
					field:  fmt.Sprintf("MinerSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMinerSetResponseMultiError(errors)
	}

	return nil
}

// ListMinerSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListMinerSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMinerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMinerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMinerSetResponseMultiError) AllErrors() []error { return m }

// ListMinerSetResponseValidationError is the validation error returned by
// ListMinerSetResponse.Validate if the designated constraints aren't met.
type ListMinerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMinerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMinerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMinerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMinerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMinerSetResponseValidationError) ErrorName() string {
	return "ListMinerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMinerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMinerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMinerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMinerSetResponseValidationError{}
